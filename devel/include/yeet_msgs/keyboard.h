// Generated by gencpp from file yeet_msgs/keyboard.msg
// DO NOT EDIT!


#ifndef YEET_MSGS_MESSAGE_KEYBOARD_H
#define YEET_MSGS_MESSAGE_KEYBOARD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yeet_msgs
{
template <class ContainerAllocator>
struct keyboard_
{
  typedef keyboard_<ContainerAllocator> Type;

  keyboard_()
    : c(0)  {
    }
  keyboard_(const ContainerAllocator& _alloc)
    : c(0)  {
  (void)_alloc;
    }



   typedef uint8_t _c_type;
  _c_type c;





  typedef boost::shared_ptr< ::yeet_msgs::keyboard_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yeet_msgs::keyboard_<ContainerAllocator> const> ConstPtr;

}; // struct keyboard_

typedef ::yeet_msgs::keyboard_<std::allocator<void> > keyboard;

typedef boost::shared_ptr< ::yeet_msgs::keyboard > keyboardPtr;
typedef boost::shared_ptr< ::yeet_msgs::keyboard const> keyboardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yeet_msgs::keyboard_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yeet_msgs::keyboard_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yeet_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
<<<<<<< HEAD
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'yeet_msgs': ['/home/jkleiber/intro_robotics_ws/src/yeet_msgs/msg']}
=======
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'yeet_msgs': ['/home/trey/school/intro_robotics_ws/src/yeet_msgs/msg']}
>>>>>>> 1eb5d0eaaa0c31cda65fbb67bfde1471f8d6fb6a

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::yeet_msgs::keyboard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yeet_msgs::keyboard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yeet_msgs::keyboard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yeet_msgs::keyboard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yeet_msgs::keyboard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yeet_msgs::keyboard_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yeet_msgs::keyboard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "503f37a585b485611c99195decce8bba";
  }

  static const char* value(const ::yeet_msgs::keyboard_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x503f37a585b48561ULL;
  static const uint64_t static_value2 = 0x1c99195decce8bbaULL;
};

template<class ContainerAllocator>
struct DataType< ::yeet_msgs::keyboard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yeet_msgs/keyboard";
  }

  static const char* value(const ::yeet_msgs::keyboard_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yeet_msgs::keyboard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "char c\n\
";
  }

  static const char* value(const ::yeet_msgs::keyboard_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yeet_msgs::keyboard_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.c);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct keyboard_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yeet_msgs::keyboard_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yeet_msgs::keyboard_<ContainerAllocator>& v)
  {
    s << indent << "c: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.c);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YEET_MSGS_MESSAGE_KEYBOARD_H
